##
## Required
##
defaultNewDocuSignPwd = 650e1dfa3a9a42248bc9e22f00c5a3f2
#number of min between requests to the api for envelope status changes
#recommended is 15 min, but is dependent on api limits for load etc.
#for light use per tenant 5 min should be ok. Need to implement docusign connect
#for real-time status updates -
### !!!NB: if this is changed the fixedDelay in com.fluidnotions.docusign.services.DocuSignScheduledTasks.updateAllEnvelopesStatus()
### !!!also needs to be changed and the code recompiled
periodInMin = 5
#there is a bug in the api it only seems to work with this timezone for api call parameters
apiTimezone = America/Los_Angeles
#this defaults to demo,
#Remember that the authentication service uses different host names for the production environment and the developer sandbox.
#account-d.docusign.com for the developer sandbox
#account.docusign.com for the production platform.
#for production you will need to update the default or set it to
#www.docusign.net
serverUrl = https://demo.docusign.net
#assigning permission profiles to specific users will be available in the upcoming releases 
#of the DocuSign experience and API's. Currently, if you assign a permission profile to a 
#group, and then create a new user (assigning the user to the group with a certain permission 
#profile ID), the individual permission settings for the permission group will be applied to 
#the user, however you will not see that specific group called out in the Users table. If you 
#open the user and look at their permissions, the same ones as specified in the permission 
#profile for the group should be applied. 
#new use group permission profile id
###
###
#so in order to get the list of profile ids use a testing rest client to call
#Account Permission Profile GET v2/accounts/:accountId/permission_profiles
#example request (except in production it shouldn't be demo.docusign.net see prop serverUrl and obviously the  Auth header will be your own as well as the account ID):
#{
#  "uri": "https://demo.docusign.net/restapi/v2/accounts/285f581d-9c23-48b5-8205-ae5954a7d76f/permission_profiles",
#  "headers": {
#    "X-DocuSign-Authentication": "{\"Username\":\"ian@fluidnotions.com\",\"Password\":\"56tfcvbnh\",\"IntegratorKey\":\"a7f1a5f4-57fd-42bf-a93d-bbc8508fe289\"}"
#  }
#}
#example response:
#{
#  "permissionProfiles": [
#    {
#      "permissionProfileId": "2119039",
#      "permissionProfileName": "Account Administrator"
#    },
#    {
#      "permissionProfileId": "2119040",
#      "permissionProfileName": "DocuSign Sender"
#    },
#    {
#      "permissionProfileId": "2119041",
#      "permissionProfileName": "DocuSign Viewer"
#    }
#  ]
#}
#so out permissionProfileId for new users groups assignments is 2119039 during debugging there seemed to be an error when permisssions were set to just sender, but it could have been something else
#since the user interface doesn't seem to have a place to create a group with a permissionProfileId
#we need to once again use a testing rest client to create one
#Create Group POST v2/accounts/:accountId/groups
##example request (except in production it shouldn't be demo.docusign.net see prop serverUrl and obviously the  Auth header will be your own as well as the account ID):
#{
#  "uri": "https://demo.docusign.net/restapi/v2/accounts/285f581d-9c23-48b5-8205-ae5954a7d76f/groups",
#  "method": "POST",
#  "headers": {
#    "X-DocuSign-Authentication": "{\"Username\":\"ian@fluidnotions.com\",\"Password\":\"56tfcvbnh\",\"IntegratorKey\":\"a7f1a5f4-57fd-42bf-a93d-bbc8508fe289\"}",
#    "content-length": 140
#  },
#  "body": "{\n  \"groups\": [\n  {\n      \"permissionProfileId\": \"2119040\",\n      \"groupName\": \"Default\",\n      \"groupId\": \"senders01\"\n    }\n  ]\n}"
#}
#body as json before stringification for post see we are using profile id we got above
#{
#  "groups": [
#    {
#      "permissionProfileId": "2119039",
#      "groupName": "Default",
#      "groupId": "senders01"
#    }
#  ]
#}
#now yoy can do use the same method to call
#Get Account Groupv GET 2/accounts/:accountId/groups
#example response
#{
#  "groups": [
#    {
#      "groupId": "1495418",
#      "groupName": "Administrators",
#      "permissionProfileId": "2119039",
#      "groupType": "adminGroup"
#    },
#    {
#      "groupId": "1499673",
#      "groupName": "Default",
#      "permissionProfileId": "2119039",
#      "groupType": "customGroup"
#    },
#    {
#      "groupId": "1495419",
#      "groupName": "Everyone",
#      "groupType": "everyoneGroup"
#    }
#  ],
#  "resultSetSize": "3",
#  "totalSetSize": "3",
#  "startPosition": "0",
#  "endPosition": "2"
#}
#so finally we use the properties of the sender group we just created to set the following properties
groupId = 1499673
groupName = Default
permissionProfileId = 2119039
groupType = customGroup


